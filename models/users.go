package models

import (
	"errors"

	"github.com/jinzhu/gorm"
	// import only by design of GORM
	_ "github.com/jinzhu/gorm/dialects/postgres"
)

var (
	// ErrNotFound is returned when a resource cannot be found
	// in the database
	ErrNotFound = errors.New("models: resource not found")

	// ErrInvalidID is returned when an invalid ID is provided
	// to a method like Delete
	ErrInvalidID = errors.New("models: ID provided was invalid")
)

// User is the gorm model for users
type User struct {
	gorm.Model
	Name  string
	Email string `gorm:"not null;unique_index"`
}

// UserService is the public API for users and their CRUD
type UserService struct {
	db *gorm.DB
}

// NewUserService is used to create a new client for the USerService
func NewUserService(connectionInfo string) (*UserService, error) {
	db, err := gorm.Open("postgres", connectionInfo)
	if err != nil {
		return nil, err
	}
	db.LogMode(true)
	return &UserService{
		db: db,
	}, nil
}

// Close is used to end the DB connection of this UserService
func (us *UserService) Close() error {
	return us.db.Close()
}

// ByID looks up a user using the provided ID
// If the user is found error is nil
// IF the user is not found we return an ErrNotFound
// If there is another error we will return that with more information
// about what went wrong, including errors thrown from other packages.
//
// Anything other than ErrNotFound should probably be a 500
func (us *UserService) ByID(id uint) (*User, error) {
	var user User
	db := us.db.Where("id = ?", id)
	err := first(db, &user)
	if err != nil {
		return nil, err
	}
	return &user, nil
}

//ByEmail looks up a user by email address and returns a User
// If the user is found we will return nil for error
// If the user is not found we will return ErrNotFound
// If there is any other error we will return an error with more information
// This may not be an error generated by the models package.
func (us *UserService) ByEmail(email string) (*User, error) {
	var user User
	db := us.db.Where("email = ?", email)
	err := first(db, &user)
	if err != nil {
		return nil, err
	}
	return &user, err
}

// DestructiveReset drops the user table and rebuilds it
func (us *UserService) DestructiveReset() {
	us.db.DropTableIfExists(&User{})
	us.db.AutoMigrate(&User{})
}

//Create will create the provided user and backfill data
//like the ID, CreatedAt and UpdatedAt fields.
func (us *UserService) Create(user *User) error {
	return us.db.Create(user).Error
}

//Update will update the provided user with all of the data
//in the provided user struct
func (us *UserService) Update(user *User) error {
	return us.db.Save(user).Error
}

//Delete will delete the user with the provided ID
func (us *UserService) Delete(id uint) error {
	if id == 0 {
		return ErrInvalidID
	}
	user := User{Model: gorm.Model{ID: id}}
	return us.db.Delete(&user).Error
}

//first will query using the provided gorm.DB and it will
//get the first item returned and place in into dst. If nothing
//is found in the query it will return ErrNotFound
func first(db *gorm.DB, dst interface{}) error {
	err := db.First(dst).Error
	if err == gorm.ErrRecordNotFound {
		return ErrNotFound
	}
	return err
}
